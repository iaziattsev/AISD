Radix sort(LSD - sort, рус: цифровая, поразрядная сортировка) - алгоритм сортировки,
основанный на сортировке элементов по разряду.
Главной отличительной чертойй данного алгоритма является принцип работы - не нужно сравнивать
числа между собой.
Алгоритм принимает на вход массив из n элементов(чисел, строк).
Этот способ сортировки использует идею, похожую на идею из сортировки подсчётом, но более эффективно
использует память(при большой разнице между максимальным и минимальным).

Алгоритм.
Пусть n - число элементов входного массива, p - система счисления(для простоты пусть p = 10),
m - максимальное число разрядов.
1. Найти элемент с максимальным количеством разрядов и найти сам разряд
2. Создать двумерный массив (в моём случае массив из очередей) с размером, равным количеству цифр в нашей системе
счислений, в который будем перезаписывать элементы или динамичный словарь из ключа - нужной нам цифры,
листа из соответсвующих чисел.
3. Начиная с первого разряда, добавляем в ячейку, соответствующую значению разряда, элемент.
Делаем так p раз - максимальное число разрядов максимального элемента, каждый раз переписывая
изначальный массив.


Сложность
Так как нам приходится проходить по массиву n раз, чтобы найти максимальный
разряд, после для каждого разряда (m раз) нужно отсортировать
элементы по "ведрам" и вставить их
уже в сам исходный массив по нашей системе счисления. Таким образом мы получим
T = O(m(2n + p)) = O(2mn + mp) = O(2mn) = O(n),если
считать m - константой.

Сложность по памяти же зависит от системы счисления и количества элементов. O(n + p + n),
где n - количество элементов в исходном массиве, p - размер массива очередей. O(2n + p) = O(2n) = O(n).